# This is a sample configuration file.

### The maximum number of threads/sockets ###
#
# maxIOThreads: max IO in IO threadpool in zeromq
# maxSockets: max sockets in zeromq socket pool
maxIOThreads = 10
maxSockets = 200

### Network ###
# routerFrontPort is a list of ports used by the server to listen
# peerRecieverPort should be a list because each peer requires for a port
# clientReceivePort is a list of client ports used by the server
#
routerFrontPort = 30000
peerReceiverPort = 30002,30003
clientReceivePort = 30012,20013,30014,20015
RSMDaemonPort = 61022 #RSM Daemon
RSMPort = 61023 #RSM instance port
SelfAddress = 127.0.0.1

### Snapshot ###
# currently disabled but can be triggered by client program
EpochPeriod = 10000 #unit(milliseconds)

### DB initialization during startup ###
# keys will be inserted based on its hash key
# DBSize: The size of the database.
# IsRead: whether to insert the data or read the data to/from the database.
DBSize = 0
IsRead = 1

### DB file names ###
# PersistLogDir: directory that stores persistent states like logs 
# LogFileName: WAL, logs will be named with a postfix of time, something like dtranx.log143258754632
# GCLogFileName: log used for garbage collection
# DBFileName: database directory name for leveldb
# MapdbFileName: map database directory name
PersistLogDir = ./
LogFileName = dtranx.log
GCLogFileName = gcdtranx.log
DBFileName = dtranx.db
MapdbFileName = dtranx.mapdb

### Log config ###
# LogOption: logging mechanism, possible options are Disk, Pmem
# FileTruncate: 
#	for Disk LogOption, how many entries to write to the file before creating a new log file
#		for example, prepare log is an entry, one committed transaction at participants should consist of 2 entries
#	for Pmem LogOption, FileTruncate means how many bytes to write to the log file before creating a new one
#		minimum is 2*1024*1024, or log create will fail
LogOption = Pmem
FileTruncate = 100000000

### GC threshold ###
# GCBroadcastTranxThreshold/GCBroadcastTimeThreshold: when to broadcast gc data
#	GCBroadcastTranxThreshold: how many tranx ack'ed before the coordinator starts to broadcast for gc
#	GCBroadcastTimeThreshold: how long passed before the coordinator starts to broadcast for gc(in milliseconds)
# PollingPeriod: how long does gcthread poll to garbage collect wal(in microseconds)
#	it should be normally less than GCBroadcastTimeThreshold
#	it's also used for partitionthread
GCBroadcastTranxThreshold = 1000
GCBroadcastTimeThreshold = 10000
GCPollingPeriod = 1000000

### Repartition threshold ###
# PartitionBroadcastThreshold: how many tranx in tranxHistory before the coordinator starts to broadcast transaction history
# RePartitionThreshold: how many tranx in tranxHistory in aggregate before metis are run and database are repartitioned.
#	if no automatic repartitioning wanted, set to a large number
# PartitionKeysFilter: frequency of keys existing in transactions when it should be considered to used metis instead of hash
#	it's calculated as the percentage of transactions that contains the key
# TranxHistoryLimit: number of tranx stored in memory for the next repartitioning algorithm, FIFO, old tranx will be cleaned
# RepartitionTranxFilter: frequency of committed transactions to add to the TranxHistory
#	the more it is, the more it will affect the performance when broadcasted.
#	e.g. 1000 means 1 out of 1000 committed transactions are chosen
PartitionBroadcastThreshold = 100
RePartitionThreshold = 100000000
PartitionKeysFilter = 0.001
RepartitionPollingPeriod = 2
TranxHistoryLimit = 200000
RepartitionTranxFilter = 50

### Program Log ###
# not transaction WAL, but logging/output to stderr
# PerfLog means whether to enable performance metric or not, 1 means enable, 0 otherwise
PerfLog = 0

### Server Mode ###
# ServerMode: docker, vm
ServerMode = vm

### CPU core bindings ###
### try to assign the threads to the cores so that
### no two threads are contending for the same CPU core
### note: be aware of CPU hyperthread
### core ids starts from 0
###		core0 is assumed to be left to LogCabin Service
###		core1 is assumed to be left to Zeromq I/O threads
### for multiple cores, use underscore(_) to separate the core ids
###
### This first set is used for 56cores 
#BindServiceClient = 2_3_4
#BindServiceTranx = 5_6
#BindServiceStorage = 7_8
#BindTranxAck = 9
#BindGC = 10
#BindRepartition = 11
#BindRecoverLog = 12
#BindTranxRPCHelper = 13_14
#BindTranxStates = 15
#BindStorage = 16_17_18_19_20
#BindTranxLog = 21
#BindLockTable = 22
#BindReplyThread = 23_24
#BindPeer = 25_26
#BindServer = 27
### This first set is used for 40cores
BindServiceClient = 2_22_3
BindServiceTranx = 4_5
BindServiceStorage = 6_7
BindTranxAck = 8
BindGC = 9
BindRepartition = 29
BindRecoverLog = 9
BindTranxRPCHelper = 10_11
BindTranxStates = 0
BindStorage = 28_12_32_13_33
BindTranxLog = 14
BindLockTable = 15
BindReplyThread = 16_36
BindPeer = 17_18
BindServer = 19