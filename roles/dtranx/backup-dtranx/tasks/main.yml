# TODO:
#     1. update the local dtranx conf file: follow the 183-191 lines in Deploy.py in DTranx project
#           among the configurations, InitializeDB and PerfLog might be dynamically adjusted during the perf tests, so highlight these configurations
#     2. make it configurable as whether to recover the backup database or not. Follow the 48-80 lines in TestHelper.py in DTranx project
#     3. run dtranx service: follow the 193-214 lines in Deploy.py in DTranx project
# parameters can be adjusted using --extra-vars or within playbook yml file

---
- name: restore datastructure
  command: "{{item}}"
  with_items:
    - "rm -rf {{dtranx_dir}}/dtranx.db0"
    - "rm -rf {{dtranx_dir}}/dtranx.db1"
    - "rm -rf {{dtranx_dir}}/dtranx.db2"
    - "rm -rf {{dtranx_dir}}/dtranx.db3"
    - "rm -rf {{dtranx_dir}}/dtranx.mapdb"
    - "cp -R {{dtranx_dir}}/backup/{{dtranx_datastructure}}.dtranx.db0 {{dtranx_dir}}/dtranx.db0"
    - "cp -R {{dtranx_dir}}/backup/{{dtranx_datastructure}}.dtranx.db1 {{dtranx_dir}}/dtranx.db1"
    - "cp -R {{dtranx_dir}}/backup/{{dtranx_datastructure}}.dtranx.db2 {{dtranx_dir}}/dtranx.db2"
    - "cp -R {{dtranx_dir}}/backup/{{dtranx_datastructure}}.dtranx.db3 {{dtranx_dir}}/dtranx.db3"
    - "cp -R {{dtranx_dir}}/backup/{{dtranx_datastructure}}.dtranx.mapdb {{dtranx_dir}}/dtranx.mapdb"
  when: dtranx_mode == 0

- name: backup datastructure
  command: "{{item}}"
  with_items:
    - "rm -rf {{dtranx_dir}}/backup"
    - "mkdir {{dtranx_dir}}/backup"
    - "cp -R {{dtranx_dir}}/dtranx.db0 {{dtranx_dir}}/backup/{{dtranx_datastructure}}.dtranx.db0"
    - "cp -R {{dtranx_dir}}/dtranx.db1 {{dtranx_dir}}/backup/{{dtranx_datastructure}}.dtranx.db1"
    - "cp -R {{dtranx_dir}}/dtranx.db2 {{dtranx_dir}}/backup/{{dtranx_datastructure}}.dtranx.db2"
    - "cp -R {{dtranx_dir}}/dtranx.db3 {{dtranx_dir}}/backup/{{dtranx_datastructure}}.dtranx.db3"
    - "cp -R {{dtranx_dir}}/dtranx.mapdb {{dtranx_dir}}/backup/{{dtranx_datastructure}}.dtranx.mapdb"
  when: dtranx_mode == 1

- name: fetch datastructure to local
  synchronize:
    src: "{{dtranx_dir}}/{{item.src}}"
    dest: "{{project_dir}}/dtranx_fetched/{{inventory_hostname}}/{{item.dest}}"
    mode: pull
  with_items:
    - { src: 'dtranx.db0', dest: '{{dtranx_datastructure}}.dtranx.db0' }
    - { src: 'dtranx.db1', dest: '{{dtranx_datastructure}}.dtranx.db1' }
    - { src: 'dtranx.db2', dest: '{{dtranx_datastructure}}.dtranx.db2' }
    - { src: 'dtranx.db3', dest: '{{dtranx_datastructure}}.dtranx.db3' }
    - { src: 'dtranx.mapdb', dest: '{{dtranx_datastructure}}.dtranx.mapdb' }
  when: dtranx_mode == 2

- name: push datastructure to remove
  copy:
    src: "{{project_dir}}/dtranx_fetched/{{inventory_hostname}}/{{item.src}}"
    dest: "{{dtranx_dir}}/{{item.dest}}"
  with_items:
    - { src: '{{dtranx_datastructure}}.dtranx.db0', dest: 'dtranx.db0' }
    - { src: '{{dtranx_datastructure}}.dtranx.db1', dest: 'dtranx.db1' }
    - { src: '{{dtranx_datastructure}}.dtranx.db2', dest: 'dtranx.db2' }
    - { src: '{{dtranx_datastructure}}.dtranx.db3', dest: 'dtranx.db3' }
    - { src: '{{dtranx_datastructure}}.dtranx.mapdb', dest: 'dtranx.mapdb' }
  when: dtranx_mode == 3


